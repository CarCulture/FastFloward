pub contract Artist {

  pub struct Canvas {
  
    pub let width: UInt8
    pub let height: UInt8
    pub let pixels: String

    init(width: UInt8, height: UInt8, pixels: String) {
      self.width = width
      self.height = height
      self.pixels = pixels
    }
  }

  pub resource Picture {

    pub let canvas: Canvas

    init(canvas: Canvas) {
      self.canvas + canvas
  }
}

  pub resource Printer {

    pub let width: UInt8
    pub let height: UInt8
    pub let prints: {String: Canvas}

  init(width: Uiint8, height: UInt8) {
    self.width = width;
    self.height = height;
    self.prints = {}
  }

  pub fun print(canvas: Canvas): @Picture? {
    if canvas.pixels.length != Int(self.width * self.height) {
      return nil
    }

    for symbol in canvas.pixels.utf8 {
      if symbol < 32 || symbol > 126 {
        return nil
      }
    }

    if self.prints.containsKey(canvas.pixels) == false {
      let picture <- create Picture(canvas:canvas)
      self.prints[canvas.pixels] = canvas

      return <- picture
    } else {
      return nil
    }
  }  
}

pub resource Collection {
  pub var myPics: @{Uint64: Picture}

  pub var picCount: Uint64

  pub fun deposit(picture: @Picture) {
      let id = self.picCount
      let oldPic = self.picCount
      self.picCount = id + 1
      destroy oldPic
  }
  init(){
      self.myPics ,-{}
      self.picCount = 0
  }

  destroy() {
    destroy self.myPics
  }

}
pub fun createCollection(): @Collection {
  let collection <- create Collection()
  return <- collection
}

init() {
    self.account.save(
      <- create Printer(width: 5, height: 5),
      to: /storage/ArtistPicturePrinter
    )
    self.account.link<&Printer>(
      /public/ArtistPicturePrinter,
      target: /storage/ArtistPicturePrinter
    )

    self.account.save(<- self.createCollection(), to: /storage/ArtistPictureCollection)
    self.account.link<&Collection>(
      /public/ArtistPictureCollection,
      target: /storage/ArtistPictureCollection
    )
  }
}
    let printerRef = getAccount(0x01)
      .getCapability<&Artist.Printer>(/public/ArtistPicturePrinter)
      .borrow()
      ?? panic("Couldn't borrow reference to Printer")

    printerRef.print(...)
  }
}

pub resource Printer {
    pub let prints: {String: Canvas}

    init() {
        self.prints = {}

          pub fun print(canvas: Canvas):  @Picture? {
            if self.prints.containsKey(canvas.pixels) {
              returns nil
            }else {
              let picture <- create Picture (canvas:  canvas)
              self.prints.[canvas.pixels] = canvas
              return <- picture
            }   
          }
    }
}
